<meta name="viewport"
      content="width=device-width, initial-scale=1.0, user-scalable=no">
<!-- script src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.4/jquery.min.js" type="text/javascript"></script -->
<!-- script type="text/javascript" src="js/interface.js"></script -->
<!-- script type="text/javascript" src="js/jquery.form.js"></script -->

<!-- script type="text/javascript" src="http://maps.googleapis.com/maps/api/js?sensor=false"></script-->
<script type="text/javascript" src="http://maps.googleapis.com/maps/api/js?libraries=places&sensor=true"></script>
<script type="text/javascript">

var iHaveInternet = true;
if(iHaveInternet) {

    // GLOBALS
    var map;
    var placess;
    var distanceMatrix;
    var directionsService;
    var placeInfo;
    var travelTime;
    var mouseX;
    var mouseY;
    var myMarker;
    var liveMarkers = new Array;
    var myActivePlaceMarker;
    var handleSearchResults_complete = false; // these are used to track the status of the api callback handlers
    var handleDetailResult_complete = false; // these are used to track the status of the api callback handlers
    var handleDistancMatrixResult_complete = false; // these are used to track the status of the api callback handlers
    var targetText = ''; // for evaluating challenge
    var travelTimes = new Object;
    // initialize travel times
    travelTimes['WALKING'] = travelTimes['BICYCLING'] = travelTimes['DRIVING'] = travelTimes['TRANSIT'] = 0;


    function searchMap(){
        var liveMarker;
        while(liveMarker=liveMarkers.pop())
        {
            liveMarker.setMap(null);
        }

        var placeTypeChecked = $('input:checkbox[name=placeTypes]:checked');
        if(placeTypeChecked.length>0)
        {
            var placeTypes = new Array;
            for(var i=0; i<placeTypeChecked.length; i++) {
                placeTypes[i] = placeTypeChecked[i].value;
            }
            var myPlaceSearchOptions = {
                location: map.getCenter(),
//                location: $.myLatLng,
                bounds: map.getBounds(),
                types: placeTypes,
                radius: 500
            }
            placess.search(myPlaceSearchOptions, handleSearchResults);
        }
    }
    function handleSearchResults(results, status)
    {
        if (status == google.maps.places.PlacesServiceStatus.OK)
        {
            for (var i = 0; i < results.length; i++)
            {
                var place = results[i];
                addPlaceMarker(place);
            }
        }
        handleSearchResults_complete = true;
    }

    function addMarker(location, markerInfo) {
        var myIcon;
        if(markerInfo && markerInfo.icon) {
            myIcon = markerInfo.icon;
        } else {
            myIcon = null;
        }
        var myMarkerOptions = {
            map: map,
            position: location,
            icon: myIcon
        };
        var marker = new google.maps.Marker(myMarkerOptions);
        return marker;
    }

    function addPlaceMarker(place) {
        var marker = addMarker(place.geometry.location);
        marker.set('placeReference', place.reference);
        liveMarkers.push(marker);
        google.maps.event.addDomListener(marker, 'click', showPlaceInfo);
//            google.maps.event.addDomListener(marker, 'mouseout', hidePlaceInfo);
        return marker;
    }

    function handleDetailResult(result, status)
    {
        if (status == google.maps.places.PlacesServiceStatus.OK)
        {
            placeInfo =
            {
                food: 0,
                drink: 0,
                entertainment: 0,
                cost: 0,
                types: result.types,
                name: result.name,
                rating: result.rating,
                id: result.id
            }


            for(var i=0; i<placeInfo.types.length; i++)
            {
                var type = placeInfo.types[i];
                switch(type) {
                    // move these magic numbers
                    case 'bar':
                        placeInfo.food += 8;
                        placeInfo.drink += 10;
                        placeInfo.cost += 5;
                        break;
                    case 'cafe':
                        placeInfo.food += 5;
//                        placeInfo.caffeine += 5;
                        placeInfo.cost += 3;
                        break;
                }
            }
            $("#place_info_handle_name").html(placeInfo.name);
            $("#place_info_id").html(placeInfo.id);
            $("#place_info_name").html(placeInfo.name);
            $("#place_info_rating").html(placeInfo.rating);
            $("#place_info_food").html(placeInfo.food);
            $("#place_info_drink").html(placeInfo.drink);
            $("#place_info_entertainment").html(placeInfo.entertainment);
            $("#place_info_cost").html(placeInfo.cost);
        }
        handleDetailResult_complete = true;
    }

    function handleDistanceMatrixResult(result, status, travelMode) {
        if (status == google.maps.DistanceMatrixStatus.OK) {
            travelTime = result.rows[0].elements[0].duration;
            travelTimes[travelMode] = travelTime.value;
            $("#place_info_travelTime"+travelMode).html(travelTime.text);
        }
        handleDistancMatrixResult_complete = true;
    }
    function handleDistanceMatrixWalkingResult(result, status) {
        handleDistanceMatrixResult(result, status, 'WALKING');
    }
    function handleDistanceMatrixBicyclingResult(result, status) {
        handleDistanceMatrixResult(result, status, 'BICYCLING');
    }
    function handleDistanceMatrixDrivingResult(result, status) {
        handleDistanceMatrixResult(result, status, 'DRIVING');
    }
    function handleDirectionsServiceTransitResult(result, status) {
        handleDistanceMatrixResult(result, status, 'TRANSIT');
    }
    function handleDirectionsServiceResult(result, status) {
        if(result) {
            alert('hello got yer directions');
        }
    }

    function showPlaceInfo() {
        myActivePlaceMarker = this;
        $("#place_info").css('left', mouseX);
        $("#place_info").css('top', mouseY);
        var placeDetailsRequest = {
            reference: this.placeReference
        }

        $.ajax({
            url: '/places/'+this.placeReference,
            type: "GET",
            data: {
                external_id: this.placeReference
//                player_id: < %= @player.id % >
            },
            dataType: 'json',
            success: function(data){
                ajaxPlaceHandler(data);
            }, //end success: function(result)
        });

        placess.getDetails(placeDetailsRequest, handleDetailResult);

        // initialize travel times
        travelTimes['WALKING'] = travelTimes['BICYCLING'] = travelTimes['DRIVING'] = travelTimes['TRANSIT'] = 0;

        var distanceMatrixRequest = {
            origins: [$.myLatLng],
            destinations: [this.position],
            travelMode:google.maps.TravelMode.WALKING
        }
        distanceMatrix.getDistanceMatrix(distanceMatrixRequest, handleDistanceMatrixWalkingResult);
        var distanceMatrixRequest = {
            origins: [$.myLatLng],
            destinations: [this.position],
            travelMode:google.maps.TravelMode.BICYCLING
        }
        distanceMatrix.getDistanceMatrix(distanceMatrixRequest, handleDistanceMatrixBicyclingResult);
        var distanceMatrixRequest = {
            origins: [$.myLatLng],
            destinations: [this.position],
            travelMode:google.maps.TravelMode.DRIVING
        }
        distanceMatrix.getDistanceMatrix(distanceMatrixRequest, handleDistanceMatrixDrivingResult);
// doing transit option in another iteration; current issue is that destination needs to be a text string or latLng but there are a host of other issues as well
/*
        var directionsServiceRequest = {
            origin: [$.myLatLng],
            destination: [this.position],
            travelMode: google.maps.DirectionsTravelMode.TRANSIT
        }
        directionsService.route(directionsServiceRequest, handleDirectionsServiceTransitResult);
*/
        $("#place_info").show();
    }

    function ajaxPlaceHandler(placeInfo) {
        for(var attribute in placeInfo) {
            $("#place_info_"+attribute).html(placeInfo[attribute]);
        }
    }

    function hidePlaceInfo()
    {
        $("#place_info").hide();
    }

    function evaluateChallenge(input) {
        var punctuation = /['";:,.\/?\\-]/g;

        if(input.toLowerCase().replace(punctuation, '') == targetText.toLowerCase().replace(punctuation, '')) {
            alert("yeah!");
        } else {
            alert("nope");
        }

        $.ajax({
            url: '/places/'+this.placeReference,
            type: "GET",
            data: {
                external_id: this.placeReference
//                player_id: < %= @player.id % >
            },
            dataType: 'json',
            success: function(data){
                ajaxPlaceHandler(data);
            }, //end success: function(result)
        });
    }

//    google.maps.event.addDomListener(window, 'load', initialize);
}
    // NOW FOR JQUERY STUFF
    $(document).ready(function(){
        $.playerInfo = new Object();
// for testing!!!
getChallenge(1);
<%
    # @player.attributes.each { |key, value|
%>
        $.playerInfo['< %= key % >'] = '< %= value % >';
<%
    # }
%>
//        $.myLatLng = new google.maps.LatLng(< %= @player_location.lat % >, < %= @player_location.lng % >);

        var myMapOptions = {
            zoom: 17,
            center: $.myLatLng,
            mapTypeId: google.maps.MapTypeId.ROADMAP,
            disableDefaultUI: true,
//               disableDoubleClickZoom: true
        };
        map = new google.maps.Map(document.getElementById('map_canvas'), myMapOptions);
//        google.maps.event.addDomListener(map, 'dragend', searchMap);
        google.maps.event.addDomListener(map, 'resize', searchMap);
        google.maps.event.addDomListener(map, 'zoom_changed', searchMap);
        google.maps.event.addDomListener(map, 'center_changed', searchMap);

        google.maps.event.addDomListener(map, 'click', function(event) {
            mapZoom = map.getZoom();
            startLocation = event.latLng;
        });

        placess = new google.maps.places.PlacesService(map);
        distanceMatrix = new google.maps.DistanceMatrixService();
        directionsService = new google.maps.DirectionsService();

        var myMarkerInfo = {
            icon: '<%= image_path "fw.jpg" %>'
        }
        myMarker = addMarker($.myLatLng, myMarkerInfo);
        google.maps.event.addDomListener(myMarker, 'click', showPlayerInfo);

        $(document).keyup(function(e) {
            if (e.keyCode == 27) {
                $("#player_info").hide();
                $("#place_info").hide();
            }
        });
        $('#search_bar').click()
        $().mousemove(function(e){
            mouseX = e.pageX;
            mouseY = e.pageY;
        });
        //jQuery events go here
        $('#player_info').draggable( {
            zIndex:    20,
            ghosting:false,
            opacity: 0.7,
            handle:    '#player_info_handle'
        } );
if(iHaveInternet) {
        $("#player_info").hide();
} else {
    showPlayerInfo();
}
        $('#player_info_display').click(function() {
            $("#player_info_content").show();
            $("#current_location_content").hide();
            $("#search_area_content").hide();
        });
        $('#current_location_display').click(function() {
            $("#player_info_content").hide();
            $("#current_location_content").show();
            $("#search_area_content").hide();
        });
        $('#search_area_display').click(function() {
            $("#player_info_content").hide();
            $("#current_location_content").hide();
            $("#search_area_content").show();
        });

        $('#player_info_close').click(function() {
            $("#player_info").hide();
        });

        $('#place_info').draggable(
            {
                zIndex:    20,
                ghosting:false,
                opacity: 0.7,
                handle:    '#place_info_handle'
            }
        );
        $("#place_info_go_walk").click(doAction);
        $("#place_info_go_taxi").click(doAction);
        $("#place_info").hide();

        $('#place_info_close').click(function() {
            $("#place_info").hide();
        });
        $('#place_info_handle').click(function() {
            $("#place_info").hide();
        });

        $('#speech').draggable(
            {
                zIndex:    20,
                ghosting:false,
                opacity: 0.7,
                handle:    '#speech_handle'
            }
        );
        $("#speech").hide();

        $('#speech_close').click(function() {
            $("#speech").hide();
        });
        $('#speech_handle').click(function() {
            $("#speech").hide();
        });
        $('#map_control').click(function() {
            map.setCenter($.myLatLng);
        });
        $('#submit_button').click(function() {
            evaluateChallenge(final_transcript);
        });

        $("#travel_mode").hide();

<%
   for counter in 1..@player.level
%>
        $("#get_challenge_<%= counter %>").click( function() {
            getChallenge(<%= counter %>);
        });
<%
   end
%>
        function getChallenge(level) {
            $.ajax({
                type: 'GET',
                url: '/challenges/' + level + '/get_by_level',
                dataType: 'json',
                data: {
//                    base_locale: '< %= # @player.base_locale % >',
//                    target_locale: '< %= # @player.target_locale % >'
                },
                success: function(data){
                    ajaxChallengeHandler(data);
                }
            });
        }

        function ajaxChallengeHandler(challengeData) {
            debugger;
            targetText = challengeData['challenge_text'];
            var challengeText = "Say the following:\n\"" + targetText + "\"";
            $("#speech").show();
            $("#challenge").html(challengeText);
            $("#challenge").show;
        }

        function showPlayerInfo() {
            $("#player_info").css('left', mouseX);
            $("#player_info").css('top', mouseY);
            $.ajax({
                type: 'GET',
                url: '/players/1',
                dataType: 'json',
                success: function(data){
                    ajaxPlayerHandler(data);
                }, //end success: function(result)
            });
            $("#player_info").show();
            $('#player_info_display').click();
        }

        function ajaxPlayerHandler(playerData) {
        //        var date = new Date(playerData.time*1000);
        //        var hours = date.getHours();
        //        var minutes = date.getMinutes();
        //        $("#player_info_time").html(hours + ':' + minutes);
            $.ajax({
                type: 'GET',
                url: '/locations/' + playerData.location_id,
                dataType: 'json',
                success: function(data){
                    ajaxCurrentLocationHandler(data);
                }, //end success: function(result)
            });
            for(var attribute in playerData) {
                $.playerInfo[attribute] = playerData[attribute];
                $("#player_info_"+attribute).html(playerData[attribute]);
            }
        }

        function ajaxCurrentLocationHandler(locationInfo) {
            for(var attribute in locationInfo) {
                $("#current_location_"+attribute).html(locationInfo[attribute]);
            }
        }

        // this is the one that does it
        function doAction(e) {
            if(e.target.id == 'place_info_go_walk') {
                var travelTime=travelTimes['WALKING'];
        /*
        this stuff could be used for making an interesting animation of moving in real time
            but for now I'm just going to enter travel mode and call it good
                    var directionsServiceRequest = {
                        origin: [$.myLatLng],
                        destination: [myActivePlaceMarker.position],
                        travelMode: google.maps.DirectionsTravelMode.WALKING
                    }
                    directionsService.route(directionsServiceRequest, handleDirectionsServiceResult);
        */
            }
            if(e.target.id == 'place_info_go_taxi') {
                var travelTime=travelTimes['DRIVING'];
                $("#place_info").hide();
                targetText = "Driver please take me to " + placeInfo.name;
                var challengeText = "Say the following:\n\"" + targetText + "\"";
                $("#challenge").html(challengeText);
                $("#speech").show();
                // var placeInfo = getPlaceInfo(myActivePlaceMarker.position);
                thinger = placeInfo;
            }

            var travel_timer = $.timer(function() {
                this.stop();
                $('#travel_mode_close').show();
                $('#travel_mode_handle').click(function() {
                    finishTravel();
                    $("#travel_mode").hide();
                });
            });

            travelTime = 10; // for temp
            travel_timer.set({ time : 1000*travelTime, autostart : true });
            $("#place_info").hide();
            $('#travel_mode_close').hide();
            $("#travel_mode").show();
            $.ajax({
                url: '/players/<%= @player.id %>/start_travel',
                type: "GET",
                dataType: 'json',
                success: function(data){
                    handleStartTravel(data);
                }
            });
        }

        function finishTravel() {
            myMarker.setPosition(myActivePlaceMarker.position);
            map.panTo(myActivePlaceMarker.position);

//               $.playerInfo.time = parseInt($.playerInfo.time) + parseInt(travelTime.value);
            $.playerInfo.money = parseInt($.playerInfo.money) - parseInt(placeInfo.cost);
            $.playerInfo.food = parseInt($.playerInfo.food) + parseInt(placeInfo.food);
            $.playerInfo.drink = parseInt($.playerInfo.drink) + parseInt(placeInfo.drink);
            $.playerInfo.happiness = parseInt($.playerInfo.happiness) + parseInt(placeInfo.entertainment);
//               $("#player_info_time").html($.playerInfo.time);
            $("#player_info_money").html($.playerInfo.money);
            $.ajax({
                url: '/players/<%= @player.id %>/finish_travel',
                type: "GET",
                dataType: 'json',
                success: function(data){
                    handleFinishTravel(data);
                }
            });
        }

        function handleStartTravel(data){
            var noop = data;
        }
        function handleFinishTravel(data){
            var noop = data;
        }
    });

</script>
<style type="text/css">
    html, body, #map_canvas {
        margin: 0;
        padding: 0;
        height: 100%;
    }
    body {
        font-family:Verdana, Arial, Helvetica, sans-serif;
        font-size:11px
    }
    #player_info, #place_info, #speech, #travel_mode {
        position: absolute;
        left:200px;
        top:100px;
        width:500px;
        background-color:#f0f5FF;
        border: 1px solid #000;
        z-index: 50;
    }
    #map_control {
        position: absolute;
        right:50px;
        top:50px;
        width:200px;
        background-color:#f0f5FF;
        border: 1px solid #000;
        z-index: 50;
    }
    #speech-input-field {
        width: 400px;
        height: 50px;
        padding: 10px 15px;
        font-size: 155%;
        border-radius: 10px;
        border: 1px solid #ccc;
        outline: 0;
    }
    .handle {
        background-color:#5588bb;
        padding:2px;
        text-align:center;
        font-weight:bold;
        vertical-align:middle;
    }
    .handle a {
        color: #FFFFFF;
        padding-left:5px;
        padding-right:5px;
    }
    #player_info_content, #place_info_content, #speech_content, #travel_mode_content {
        padding:5px;
    }
    #player_info_close, #place_info_close, #speech_close, #travel_mode_close {
        float:right;
        text-decoration:none;
    }
    h1, h2 {
        font-size:20px;
    }
</style>
</head>
<body>
<!--
<h1>Welcome to Traveler</h1>
<p>Find me in app/views/home/index.html.haml</p>

<p>
  It is now <%= Time.now %>
</p>
<p>
  You are at  <%= Time.now %>
</p>
-->
<div id="map_canvas"></div>
<div id="place_info">
  <div id="place_info_handle" class="handle">
    <a href="#" id="place_info_close">[ x ]</a>
    <a href="#" id="place_info_handle_name">Place Info</a>
  </div>
  <div id="place_info_content">
    <table>
      <tr>
        <td><%= t "place_info.id" %>:</td>
        <td id="place_info_id"></td>
      </tr>
      <tr>
        <td><%= t "place_info.name" %>:</td>
        <td id="place_info_name"></td>
      </tr>
      <tr>
        <td><%= t "place_info.rating" %>:</td>
        <td id="place_info_rating"></td>
      </tr>
      <tr>
        <td><%= t "place_info.travelTimeWALKING" %>:</td>
        <td id="place_info_travelTimeWALKING"></td>
      </tr>
      <tr>
        <td><%= t "place_info.travelTimeBICYCLING" %>:</td>
        <td id="place_info_travelTimeBICYCLING"></td>
      </tr>
      <tr>
        <td><%= t "place_info.travelTimeDRIVING" %>:</td>
        <td id="place_info_travelTimeDRIVING"></td>
      </tr>
      <tr>
        <td><%= t "place_info.travelTimeTRANSIT" %>:</td>
        <td id="place_info_travelTimeTRANSIT"></td>
      </tr>
      <tr>
        <td><%= t "place_info.food_value" %>/<%= t "place_info.food_cost" %>:</td>
        <td><span id="place_info_food_value"></span>/<span id="place_info_food_cost"></span></td>
      </tr>
      <tr>
        <td><%= t "place_info.drink_value" %>/<%= t "place_info.drink_cost" %>:</td>
        <td><span id="place_info_drink_value"></span>/<span id="place_info_drink_cost"></span></td>
      </tr>
<!--
      <tr>
        <td>Entertainment:</td>
        <td id="place_info_entertainment"></td>
      </tr>
      <tr>
        <td>Cost:</td>
        <td id="place_info_cost"></td>
      </tr>
-->
      <tr>
        <td></td>
        <td id=""><input id="place_info_go_walk" type="button" value="<%= t "place_info.go_walk" %>"></td>
      </tr>
      <!-- allow player to have/rent a car - then add driving option -->
      <tr>
        <td></td>
        <td id=""><input id="place_info_go_taxi" type="button" value="<%= t "place_info.go_taxi" %>"></td>
      </tr>
    </table>
  </div>
</div>

<div id="map_control">
  <div id="map_control_handle" class="handle">
    <a href="#" id="map_control_center"><%= t "map_control_center" %></a>
  </div>
</div>

<div id="travel_mode">
  <div id="travel_mode_handle" class="handle">
    <a href="#" id="travel_mode_close">[ x ]</a>
    <a href="#" id="travel_mode_handle_name"><%= t "travel_mode" %></a>
  </div>
  <div id="travel_mode_content">
    Now we're in travel mode. Let's do some challenges to pass the time:
    <div id="challengeXXX">
    </div>
    <div id="challenge_list">
<%
   for counter in 1..@player.level
%>
      <div><a href="#" id="get_challenge_<%= counter %>">level <%= counter %></a></div>
<%
   end
%>
    </div>
  </div>
</div>

<%= render "players/player_info" %>
<%= render "speech" %>


</body>
</html>
